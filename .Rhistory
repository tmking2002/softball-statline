if(min(season < 2016 | max(season > 2024)) & category == "Pitching") return("Invalid Season")
if(min(season < 2016 | max(season > 2024)) & category == "Hitting") return("Invalid Season")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
division <- stringr::str_replace(division, "D", "d")
url <- c()
if(category == "Hitting"){
for(i in season){
if(division == "d3" & category == "Hitting" & i == 2021) {url <- c(url, "https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_hitting_box_scores_2021.RDS?raw=true"); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_hitting_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Pitching"){
for(i in season){
if(division == "d3" & category == "Pitching" & i %in% 2016:2020) {url <- c(url, glue::glue("https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_pitching_box_scores_{i}.RDS?raw=true")); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_pitching_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Fielding"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/d1_fielding_box_scores_2023.RDS?raw=true")
}
box <- data.frame()
for(i in url){
con <- url(i)
on.exit(close(con))
box <- bind_rows(box, readRDS(con))
}
return(box)
}
d1_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D1")
d2_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D2")
d3_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D3")
hitting_box <- rbind(d1_hitting_box, d2_hitting_box, d3_hitting_box) %>%
select(player, team, season)
d1_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D1")
d2_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D2")
d3_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D3")
pitching_box <- rbind(d1_pitching_box, d2_pitching_box, d3_pitching_box) %>%
select(player, team, season)
box <- rbind(hitting_box, pitching_box) %>%
distinct(team, player, season) %>%
separate(player, c("last", "first"), sep = ", ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
unique_names <- box %>%
drop_na(first, last) %>%
mutate(first =  proper(trimws(str_remove(first, "\\."))),
last = proper(trimws(str_remove(last, "\\.")))) %>%
group_by(last, first) %>%
summarise(player_id = cur_group_id(),
teams = paste(unique(team), collapse = " + "),
seasons = paste(unique(season), collapse = "+")) %>%
ungroup() %>%
filter(str_length(first) > 1,
str_length(last) > 1,
first != "Unknown",
!str_detect(first, "[0-9]"),
!str_detect(last, "[0-9]")) %>%
mutate(player = paste(first, last)) %>%
select(player_id, player, teams, seasons, first, last) %>%
arrange(player_id)
teams <- read_csv("teams/data/all_teams.csv")
final_players <- unique_names %>%
mutate(last_team = trimws(str_split(teams, "\\+") %>% sapply(tail, 1))) %>%
merge(teams, by.x = "last_team", by.y = "team_name", all = T) %>%
mutate(division = ifelse(is.na(division), "D-III", division)) %>%
arrange(player)
write.csv(unique_names, "players/data/all_players.csv")
write.csv(final_players %>% filter(division == "D-I"), "players/data/players_d1.csv")
write.csv(final_players %>% filter(division == "D-II"), "players/data/players_d2.csv")
write.csv(final_players %>% filter(division == "D-III"), "players/data/players_d3.csv")
View(d3_pitching_box)
View(pitching_stats_2024)
if (!require("tidyverse", character.only = TRUE)) {
install.packages("tidyverse")
}
library(tidyverse)
print("PITCHING STATS")
teams <- read_csv("teams/data/all_teams.csv") %>%
select(team_name, team_id)
players <- read_csv("players/data/all_players.csv") %>%
select(player, player_id)
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
get_stats <- function(box, season){
stats <- box %>%
separate(player, c("last", "first"), sep = ", ") %>%
merge(teams, by.x = "team", by.y = "team_name") %>%
mutate(season = .env$season,
player = paste(first, last)) %>%
filter(str_length(player) > 1) %>%
mutate(lower_player = tolower(player)) %>%
merge(players %>% mutate(lower_player = tolower(player)) %>% select(-player), by = "lower_player") %>%
group_by(team_id, season, player, player_id) %>%
summarise(across(c(er, ip, ha, bf, bb, hb, so, hr_a),
.fns = \(col) sum(as.numeric(col))),
era = format(round(er / ip * 7, 3), nsmall = 3),
opp_avg = round((ha) / (bf - bb - hb), 3),
whip = round((bb + hb + ha) / ip, 3),
fip = format(round((13 * hr_a + 3 * (bb + hb) - 2 * so) / ip + 2.4, 3), nsmall = 3),
ip = round(floor(ip) + ip %% 1 / 3, 1)) %>%
ungroup() %>%
filter(ip > 0) %>%
drop_na(era, opp_avg, whip, fip) %>%
select(team_id, player_id, season, player, ip, ha, bb, hb, so, hr_a, era, opp_avg, whip, fip) %>%
arrange(desc(ip))
if(season == 2016){
stats$hr_a <- 0
}
return(stats)
}
write.csv(distinct(rbind(readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d1_pitching_box_scores_2024.RDS")),
readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d2_pitching_box_scores_2024.RDS")),
readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d3_pitching_box_scores_2024.RDS")))) %>% get_stats(., 2024),
"teams/data/pitching_stats/pitching_stats_2024.csv")
test <- distinct(rbind(readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d1_pitching_box_scores_2024.RDS")),
readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d2_pitching_box_scores_2024.RDS")),
readRDS(url("https://github.com/sportsdataverse/softballR-data/raw/main/data/d3_pitching_box_scores_2024.RDS")))) %>% get_stats(., 2024)
test %>% view
library(readr)
pitching_stats_2024 <- read_csv("teams/data/pitching_stats/pitching_stats_2024.csv")
View(pitching_stats_2024)
library(softballR)
library(readr)
hitting_stats_2024 <- read_csv("teams/data/hitting_stats/hitting_stats_2024.csv")
View(hitting_stats_2024)
stats <- hitting_stats_2024 %>% filter(team_id==255)
stats %>% select(ab, player, obp, ops)
stats %>% select(ab, player, obp, ops) %>% filter(ab >= 10)
stats %>% select(ab, player, obp, ops) %>% filter(ab >= 10 & player != "Madison Dobbins")
stats %>% select(ab, player, obp, ops) %>% filter(ab >= 10 & player != "Madison Dobbins") %>% write.csv("~/Projects/GT-Softball/data_dashboard/hitting_stats.csv")
stats %>% select(ab, player, obp, ops) %>% filter(ab >= 10 & player != "Madison Dobbins"& player != "Gracyn Tucker") %>% write.csv("~/Projects/GT-Softball/data_dashboard/hitting_stats.csv")
library(tidyverse)
library(randomForest)
library(softballR)
library(combinat)
box <- load_ncaa_softball_playerbox(2023, "Hitting")
stats <- box %>%
separate(player, c("last_name", "first_name"), sep = ", ") %>%
mutate(first_init = trimws(substr(first_name, 1, 1)),
player = str_to_title(paste(first_init, last_name))) %>%
group_by(player, team) %>%
summarise(ab = sum(ab),
avg = sum(h) / sum(ab),
obp = (sum(h) + sum(bb) + sum(hbp)) / (sum(ab) + sum(h) + sum(bb) + sum(hbp) + sum(sf) + sum(sh)),
slg = sum(tb) / sum(ab),
ops = obp + slg,
k_rate = sum(k) / sum(ab),
sb_rate = sum(sb) / (sum(h) + sum(bb) + sum(hbp))) %>%
filter(ab >= 10 & h > 0) %>%
select(-ab)
model <- readRDS("~/Projects/GT-Softball/optimal_lineup/order_model.RDS")
gt_stats <- load_ncaa_softball_playerbox(2024, "Hitting") %>%
filter(team == "Georgia Tech") %>%
separate(player, c("last", "first"), sep = ", ") %>%
mutate(player = paste(first, last)) %>%
group_by(player) %>%
summarise(ab = sum(ab),
avg = sum(h) / sum(ab),
obp = (sum(h) + sum(bb) + sum(hbp)) / (sum(ab) + sum(h) + sum(bb) + sum(hbp) + sum(sf) + sum(sh)),
slg = sum(tb) / sum(ab),
ops = obp + slg,
k_rate = sum(k) / sum(ab),
sb_rate = sum(sb) / (sum(h) + sum(bb) + sum(hbp))) %>%
ungroup() %>%
filter(ab >= 10)
test_lineup <- function(lineup_vec){
lineup <- data.frame(player = lineup_vec) %>%
merge(gt_stats, by= "player")
order <- c(lineup %>% arrange(desc(obp)) %>% slice(1) %>% pull(player),
lineup %>% arrange(desc(obp)) %>% slice(2) %>% pull(player),
lineup %>% arrange(desc(obp)) %>% slice(3) %>% pull(player),
NA,
NA,
NA,
NA,
NA,
NA)
possible <- permn(lineup %>% arrange(desc(obp)) %>% slice(4:9) %>% pull(player))
runs_expected <- 0
optimal <- NA
for(i in 1:length(possible)){
cur_order <- order
cur_order[4] <- possible[[i]][1]
cur_order[5] <- possible[[i]][2]
cur_order[6] <- possible[[i]][3]
cur_order[7] <- possible[[i]][4]
cur_order[8] <- possible[[i]][5]
cur_order[9] <- possible[[i]][6]
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
if(predicted > runs_expected){
runs_expected <- predicted
optimal <- cur_order
}
if(i %% 100 == 0){print(i)}
}
return(list(runs_expected, optimal))
}
lineup_1 <- c("Mallorie Black", "Jayden Gailey", "Tiffany Domingue", "Ella Edgmon", "Jin Sileo",
"Reese Hunter", "Abby Hughes", "Paige Vukadinovich", "Emma Minghini")
lineup_2 <- c("Mallorie Black", "Grace Connelly", "Tiffany Domingue", "Ella Edgmon", "Jin Sileo",
"Reese Hunter", "Abby Hughes", "Paige Vukadinovich", "Emma Minghini")
test_1 <- test_lineup(lineup_1)
test_2 <- test_lineup(lineup_2)
runs_expected_1 <- test_1[[1]]
runs_expected_2 <- test_2[[1]]
if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_1){
optimal_lineup_final <- test_1[[2]]
} else if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_2){
optimal_lineup_final <- test_2[[2]]
} else{
optimal_lineup_final <- test_3[[2]]
}
print(optimal_lineup_final)
data.frame(1:9, optimal_lineup_final)
data.frame(num = 1:9, batter = optimal_lineup_final)
data.frame(num = 1:9, batter = optimal_lineup_final) %>% view
View(gt_stats)
model
model %>% summary
order <- c("Ella Edgmon", "Mallorie Black", "SB Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
cur_order <- order
cur_order[4] <- possible[[i]][1]
lineup_vec <- order
lineup <- data.frame(player = lineup_vec) %>%
merge(gt_stats, by= "player")
order <- c(lineup %>% arrange(desc(obp)) %>% slice(1) %>% pull(player),
lineup %>% arrange(desc(obp)) %>% slice(2) %>% pull(player),
lineup %>% arrange(desc(obp)) %>% slice(3) %>% pull(player),
NA,
NA,
NA,
NA,
NA,
NA)
possible <- permn(lineup %>% arrange(desc(obp)) %>% slice(4:9) %>% pull(player))
runs_expected <- 0
optimal <- NA
i = 1
cur_order <- order
cur_order[4] <- possible[[i]][1]
cur_order[5] <- possible[[i]][2]
cur_order[6] <- possible[[i]][3]
cur_order[7] <- possible[[i]][4]
cur_order[8] <- possible[[i]][5]
cur_order[9] <- possible[[i]][6]
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
View(final_lineup)
final_lineup
cur_lineup
cur_order <- lineup_vec
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
cur_lineup
lineup_vec
order <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
cur_order <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
lineup_1 <- c("Ella Edgmon", "Mallorie Black", "SB Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
lineup_2 <- c("Ella Edgmon", "Mallorie Black", "SB Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Grace Connelly", "Jin Sileo")
test_1 <- test_lineup(lineup_1)
lineup_1 <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
lineup_2 <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Grace Connelly", "Jin Sileo")
test_1 <- test_lineup(lineup_1)
test_2 <- test_lineup(lineup_2)
runs_expected_1 <- test_1[[1]]
runs_expected_2 <- test_2[[1]]
if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_1){
optimal_lineup_final <- test_1[[2]]
} else if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_2){
optimal_lineup_final <- test_2[[2]]
} else{
optimal_lineup_final <- test_3[[2]]
}
print(optimal_lineup_final)
data.frame(num = 1:9, batter = optimal_lineup_final) %>% view
cur_lineup <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Grace Connelly", "Jin Sileo")
cur_order <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Grace Connelly", "Jin Sileo")
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
lineup_2 <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Emma Minghini", "Jin Sileo")
lineup_1 <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Gracie Hillman", "Jin Sileo")
lineup_2 <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Paige Vukadinovich", "Emma Minghini", "Jin Sileo")
test_1 <- test_lineup(lineup_1)
test_2 <- test_lineup(lineup_2)
runs_expected_1 <- test_1[[1]]
runs_expected_2 <- test_2[[1]]
if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_1){
optimal_lineup_final <- test_1[[2]]
} else if(max(c(runs_expected_1, runs_expected_2)) == runs_expected_2){
optimal_lineup_final <- test_2[[2]]
} else{
optimal_lineup_final <- test_3[[2]]
}
cur_order <- c("Ella Edgmon", "Mallorie Black", "Sara Beth Allen", "Tiffany Domingue", "Reese Hunter", "Jayden Gailey", "Emma Minghini", "Paige Vukadinovich", "Jin Sileo")
cur_lineup <- data.frame(player = cur_order) %>% mutate(order_num = row_number()) %>% merge(gt_stats, by = "player") %>% arrange(order_num)
final_lineup <- data.frame(player1_obp = cur_lineup[1,] %>% pull(obp),
player2_obp = cur_lineup[2,] %>% pull(obp),
player3_obp = cur_lineup[3,] %>% pull(obp),
player4_obp = cur_lineup[4,] %>% pull(obp),
player5_obp = cur_lineup[5,] %>% pull(obp),
player6_obp = cur_lineup[6,] %>% pull(obp),
player7_obp = cur_lineup[7,] %>% pull(obp),
player8_obp = cur_lineup[8,] %>% pull(obp),
player9_obp = cur_lineup[9,] %>% pull(obp),
player1_slg = cur_lineup[1,] %>% pull(slg),
player2_slg = cur_lineup[2,] %>% pull(slg),
player3_slg = cur_lineup[3,] %>% pull(slg),
player4_slg = cur_lineup[4,] %>% pull(slg),
player5_slg = cur_lineup[5,] %>% pull(slg),
player6_slg = cur_lineup[6,] %>% pull(slg),
player7_slg = cur_lineup[7,] %>% pull(slg),
player8_slg = cur_lineup[8,] %>% pull(slg),
player9_slg = cur_lineup[9,] %>% pull(slg),
player1_k_rate = cur_lineup[1,] %>% pull(k_rate),
player2_k_rate = cur_lineup[2,] %>% pull(k_rate),
player3_k_rate = cur_lineup[3,] %>% pull(k_rate),
player4_k_rate = cur_lineup[4,] %>% pull(k_rate),
player5_k_rate = cur_lineup[5,] %>% pull(k_rate),
player6_k_rate = cur_lineup[6,] %>% pull(k_rate),
player7_k_rate = cur_lineup[7,] %>% pull(k_rate),
player8_k_rate = cur_lineup[8,] %>% pull(k_rate),
player9_k_rate = cur_lineup[9,] %>% pull(k_rate),
player1_sb_rate = cur_lineup[1,] %>% pull(sb_rate),
player2_sb_rate = cur_lineup[2,] %>% pull(sb_rate),
player3_sb_rate = cur_lineup[3,] %>% pull(sb_rate),
player4_sb_rate = cur_lineup[4,] %>% pull(sb_rate),
player5_sb_rate = cur_lineup[5,] %>% pull(sb_rate),
player6_sb_rate = cur_lineup[6,] %>% pull(sb_rate),
player7_sb_rate = cur_lineup[7,] %>% pull(sb_rate),
player8_sb_rate = cur_lineup[8,] %>% pull(sb_rate),
player9_sb_rate = cur_lineup[9,] %>% pull(sb_rate))
predicted <- predict(model, final_lineup , type="response")
summary(model)
