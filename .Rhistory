} else if(category == "Pitching"){
for(i in season){
if(division == "d3" & category == "Pitching" & i %in% 2016:2020) {url <- c(url, glue::glue("https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_pitching_box_scores_{i}.RDS?raw=true")); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_pitching_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Fielding"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/d1_fielding_box_scores_2023.RDS?raw=true")
}
box <- data.frame()
for(i in url){
con <- url(i)
on.exit(close(con))
box <- bind_rows(box, readRDS(con))
}
return(box)
}
d1_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D1")
close.connection()
library(tidyverse)
load_ncaa_softball_playerbox <- function(season = 2024, category, division = "D1"){
if(!is.numeric(season)) return("Invalid Season")
if(!(category %in% c("Hitting", "Pitching", "Fielding"))) return("Invalid Category")
if(category == "Fielding" & (length(season) > 1 | season[1] != 2023)) return("Only includes 2023 data... for now")
if(min(season < 2016 | max(season > 2024)) & category == "Pitching") return("Invalid Season")
if(min(season < 2016 | max(season > 2024)) & category == "Hitting") return("Invalid Season")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
division <- stringr::str_replace(division, "D", "d")
url <- c()
if(category == "Hitting"){
for(i in season){
if(division == "d3" & category == "Hitting" & i == 2021) {url <- c(url, "https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_hitting_box_scores_2021.RDS?raw=true"); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_hitting_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Pitching"){
for(i in season){
if(division == "d3" & category == "Pitching" & i %in% 2016:2020) {url <- c(url, glue::glue("https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_pitching_box_scores_{i}.RDS?raw=true")); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_pitching_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Fielding"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/d1_fielding_box_scores_2023.RDS?raw=true")
}
box <- data.frame()
for(i in url){
con <- url(i)
on.exit(close(con))
box <- bind_rows(box, readRDS(con))
}
return(box)
}
d1_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D1")
d2_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D2")
d3_hitting_box <- load_ncaa_softball_playerbox(2016:2024, "Hitting", "D3")
hitting_box <- rbind(d1_hitting_box, d2_hitting_box, d3_hitting_box) %>%
select(player, team, season)
d1_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D1")
d2_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D2")
d3_pitching_box <- load_ncaa_softball_playerbox(2016:2024, "Pitching", "D3")
pitching_box <- rbind(d1_pitching_box, d2_pitching_box, d3_pitching_box) %>%
select(player, team, season)
box <- rbind(hitting_box, pitching_box) %>%
distinct(team, player, season) %>%
separate(player, c("last", "first"), sep = ", ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
unique_names <- box %>%
drop_na(first, last) %>%
mutate(first =  proper(trimws(str_remove(first, "\\."))),
last = proper(trimws(str_remove(last, "\\.")))) %>%
group_by(last, first) %>%
summarise(player_id = cur_group_id(),
teams = paste(unique(team), collapse = " + "),
seasons = paste(unique(season), collapse = "+")) %>%
ungroup() %>%
filter(str_length(first) > 1,
str_length(last) > 1,
first != "Unknown",
!str_detect(first, "[0-9]"),
!str_detect(last, "[0-9]")) %>%
mutate(player = paste(first, last)) %>%
select(player_id, player, teams, seasons, first, last) %>%
arrange(player_id)
write.csv(unique_names, "players/data/all_players.csv")
View(all_players)
View(unique_names)
library(tidyverse)
files <- list.files("teams/data/hitting_stats")
files <- files[!files == "total_hitting_stats.csv"]
hitting_stats <- rbind(read_csv(paste0("teams/data/hitting_stats/", files))) %>%
mutate(team = "Total",
season = "") %>%
group_by(team, player_id, season, player) %>%
summarise(across(c(ab, h , x2b, x3b, hr, rbi, r, bb, hbp, k, sb, cs), sum),
avg = h / ab,
obp = (h + bb + hbp) / (ab + bb + hbp),
slg = (h - x2b - x3b - hr + (2 * x2b) + (3 * x3b) + (4 * hr)) / ab,
ops = obp + slg) %>%
ungroup() %>%
mutate(across(.cols = c(avg, obp, ops),
.fns = \(col) format(round(col, digits = 3)))) %>%
select(-slg)
write.csv(hitting_stats, "teams/data/hitting_stats/total_hitting_stats.csv")
library(tidyverse)
files <- list.files("teams/data/pitching_stats")
files <- files[!files == "total_pitching_stats.csv"]
pitching_stats <- rbind(read_csv(paste0("teams/data/pitching_stats/", files))) %>%
mutate(team = "Total",
season = "") %>%
separate(ip, c("innings", "frac"), sep = "\\.") %>%
mutate(ip = ifelse(is.na(frac), as.numeric(innings), as.numeric(innings) + as.numeric(frac) / 3),
weighted_era = ip * era,
weighted_avg = ip * opp_avg,
weighted_fip = ip * fip) %>%
group_by(team, player_id, season, player) %>%
summarise(across(c(ip, ha, bb, hb, so, hr_a), ~ sum(.x, na.rm = T)),
era = sum(weighted_era) / ip,
opp_avg = sum(weighted_avg) / ip,
whip = (bb + hb + ha) / ip,
fip = sum(weighted_fip) / ip) %>%
ungroup() %>%
mutate(ip = case_when(round(ip %% 1, 1) == 0.3 ~ (floor(ip)) + 0.1,
round(ip %% 1, 1) == 0.7 ~ (floor(ip)) + 0.2,
TRUE ~ ip),
across(.cols = c(era, opp_avg, whip, fip),
.fns = \(col) as.numeric(format(round(col, 3), digits = 3))))
write.csv(pitching_stats, "teams/data/pitching_stats/total_pitching_stats.csv")
library(tidyverse)
get_current_rpi <- function(scoreboard){
team1_scoreboard <- scoreboard[c(9,1,4,5,8)] %>% `names<-`(c("date","team_name","runs","opponent_name","opponent_runs"))
team2_scoreboard <- scoreboard[c(9,5,8,1,4)] %>% `names<-`(c("date","team_name","runs","opponent_name","opponent_runs"))
scoreboard_upd <- rbind(team1_scoreboard, team2_scoreboard) %>%
mutate(win = case_when(runs > opponent_runs ~ 1,
runs < opponent_runs ~ 0,
runs == opponent_runs ~ 0.5)) %>%
drop_na(team_name, opponent_name, runs, opponent_runs)
win_perc <- scoreboard_upd %>%
group_by(team_name) %>%
summarise(games = n(),
win_perc = mean(win, na.rm = T)) %>%
ungroup() %>%
filter(games >= min(max(games) / 2, 20)) %>% # Change at beginning of seasons
select(-games) %>%
drop_na()
scoreboard_upd_2 <- scoreboard_upd %>%
merge(win_perc, by.x = "opponent_name", by.y = "team_name", all = T) %>%
rename(opponent_win_perc = win_perc) %>%
merge(win_perc, by = "team_name", all = T)
opponent_win_perc <- scoreboard_upd_2 %>%
group_by(team_name) %>%
summarise(opponent_opponent_win_perc = mean(opponent_win_perc, na.rm = T))
scoreboard_upd_3 <- scoreboard_upd_2 %>%
merge(opponent_win_perc, by.x = "opponent_name", by.y = "team_name", all = T)
rpi <- scoreboard_upd_3 %>%
drop_na() %>%
group_by(team_name) %>%
summarise(rpi_coef = (.5 * mean(win_perc) + .25 * mean(opponent_win_perc) + .25 * mean(opponent_opponent_win_perc)),
record = paste(floor(sum(win)),floor(n() - sum(win)),ceiling(sum(win) %% 1), sep = "-")) %>%
ungroup() %>%
mutate(rpi_rank = rank(-rpi_coef))
return(rpi)
}
cur_season <- 2023
team_ids <- read_csv("teams/data/all_teams.csv") %>%
select(team_name, team_id)
d1_scoreboard <- readRDS(url(glue::glue("https://github.com/sportsdataverse/softballR-data/raw/main/data/ncaa_scoreboard_{cur_season}.RDS")))
d1_rpi <- get_current_rpi(d1_scoreboard) %>%
merge(team_ids, by = "team_name") %>%
select(rpi_rank, team_name, record, team_id) %>%
`names<-`(c("Rank", "Team", "Record", "Team ID")) %>%
arrange(Rank)
write_csv(d1_rpi, "rpi_rankings/d1_rpi.csv")
d2_scoreboard <- readRDS(url(glue::glue("https://github.com/sportsdataverse/softballR-data/raw/main/data/ncaa_scoreboard_D2_{cur_season}.RDS")))
d2_rpi <- get_current_rpi(d2_scoreboard) %>%
merge(team_ids, by = "team_name") %>%
select(rpi_rank, team_name, record, team_id) %>%
`names<-`(c("Rank", "Team", "Record", "Team ID")) %>%
arrange(Rank)
write_csv(d2_rpi, "rpi_rankings/d2_rpi.csv")
d3_scoreboard <- readRDS(url(glue::glue("https://github.com/sportsdataverse/softballR-data/raw/main/data/ncaa_scoreboard_D3_{cur_season}.RDS")))
d3_rpi <- get_current_rpi(d3_scoreboard) %>%
merge(team_ids, by = "team_name") %>%
select(rpi_rank, team_name, record, team_id) %>%
`names<-`(c("Rank", "Team", "Record", "Team ID")) %>%
arrange(Rank)
write_csv(d3_rpi, "rpi_rankings/d3_rpi.csv")
library(tidyverse)
library(anytime)
library(rvest)
library(magrittr)
team_ids <- read_csv("teams/data/all_teams.csv") %>%
select(team_name, team_id)
rankings <- "https://nfca.org/component/com_nfca/Itemid,230/list,1/pdiv,div1/top25,1/year,2024/" %>%
read_html() %>%
html_table() %>%
extract2(1) %>%
mutate(Team = str_extract(Team, "\\w+(?: \\w+)?"),
Team = str_replace(Team, "State", "St.")) %>%
left_join(team_ids, by = c("Team" = "team_name")) %>%
select(Team, Rank) %>%
`names<-`(c("Team", "Rank"))
d1_id <- 18261
d2_id <- 18264
d3_id <- 18265
seasons <- data.frame(season = 2012:2024,
start_date = c("2012-02-09", "2013-02-07", "2014-02-06", "2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09", "2024-02-09"),
end_date = c("2012-06-06", "2013-06-04", "2014-06-03", "2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09", "2024-06-09")) #Go back and fix after season
days = c(as.Date(seasons$start_date[5]):as.Date(seasons$end_date[5]),
as.Date(seasons$start_date[6]):as.Date(seasons$end_date[6]),
as.Date(seasons$start_date[7]):as.Date(seasons$end_date[7]),
as.Date(seasons$start_date[8]):as.Date(seasons$end_date[8]),
as.Date(seasons$start_date[9]):as.Date(seasons$end_date[9]),
as.Date(seasons$start_date[10]):as.Date(seasons$end_date[10]),
as.Date(seasons$start_date[11]):as.Date(seasons$end_date[11]),
as.Date(seasons$start_date[12]):as.Date(seasons$end_date[12]))
scoreboard_d1 <- load_ncaa_softball_scoreboard(2016:2024, "D1")
load_ncaa_softball_playerbox <- function(season = 2024, category, division = "D1"){
if(!is.numeric(season)) return("Invalid Season")
if(!(category %in% c("Hitting", "Pitching", "Fielding"))) return("Invalid Category")
if(category == "Fielding" & (length(season) > 1 | season[1] != 2023)) return("Only includes 2023 data... for now")
if(min(season < 2016 | max(season > 2024)) & category == "Pitching") return("Invalid Season")
if(min(season < 2016 | max(season > 2024)) & category == "Hitting") return("Invalid Season")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
division <- stringr::str_replace(division, "D", "d")
url <- c()
if(category == "Hitting"){
for(i in season){
if(division == "d3" & category == "Hitting" & i == 2021) {url <- c(url, "https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_hitting_box_scores_2021.RDS?raw=true"); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_hitting_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Pitching"){
for(i in season){
if(division == "d3" & category == "Pitching" & i %in% 2016:2020) {url <- c(url, glue::glue("https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_pitching_box_scores_{i}.RDS?raw=true")); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_pitching_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Fielding"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/d1_fielding_box_scores_2023.RDS?raw=true")
}
box <- data.frame()
for(i in url){
con <- url(i)
on.exit(close(con))
box <- bind_rows(box, readRDS(con))
}
return(box)
}
team_ids <- read_csv("teams/data/all_teams.csv") %>%
select(team_name, team_id)
rankings <- "https://nfca.org/component/com_nfca/Itemid,230/list,1/pdiv,div1/top25,1/year,2024/" %>%
read_html() %>%
html_table() %>%
extract2(1) %>%
mutate(Team = str_extract(Team, "\\w+(?: \\w+)?"),
Team = str_replace(Team, "State", "St.")) %>%
left_join(team_ids, by = c("Team" = "team_name")) %>%
select(Team, Rank) %>%
`names<-`(c("Team", "Rank"))
d1_id <- 18261
d2_id <- 18264
d3_id <- 18265
seasons <- data.frame(season = 2012:2024,
start_date = c("2012-02-09", "2013-02-07", "2014-02-06", "2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09", "2024-02-09"),
end_date = c("2012-06-06", "2013-06-04", "2014-06-03", "2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09", "2024-06-09")) #Go back and fix after season
days = c(as.Date(seasons$start_date[5]):as.Date(seasons$end_date[5]),
as.Date(seasons$start_date[6]):as.Date(seasons$end_date[6]),
as.Date(seasons$start_date[7]):as.Date(seasons$end_date[7]),
as.Date(seasons$start_date[8]):as.Date(seasons$end_date[8]),
as.Date(seasons$start_date[9]):as.Date(seasons$end_date[9]),
as.Date(seasons$start_date[10]):as.Date(seasons$end_date[10]),
as.Date(seasons$start_date[11]):as.Date(seasons$end_date[11]),
as.Date(seasons$start_date[12]):as.Date(seasons$end_date[12]))
scoreboard_d1 <- load_ncaa_softball_scoreboard(2016:2024, "D1")
scoreboard_d2 <- load_ncaa_softball_scoreboard(2016:2024, "D2")
scoreboard_d3 <- load_ncaa_softball_scoreboard(2016:2024, "D3")
load_ncaa_softball_scoreboard <- function(season, division = "D1"){
if(!is.numeric(season)) return("Invalid Input")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
if(min(season) < 2012 | max(season) > 2024) stop("Invalid Season")
if(min(season) < 2016 & division != "D1") stop("Invalid Season")
if(length(season) == 1){
if(division == "D1"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{season}.RDS?raw=true")
} else{
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{division}_{season}.RDS?raw=true")
}
con <- url(url)
on.exit(close(con))
scoreboard <- try(readRDS(con), silent = TRUE)
} else{
scoreboard <- data.frame()
for(i in 1:length(season)){
if(division == "D1"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{season[i]}.RDS?raw=true")
} else{
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/ncaa_scoreboard_{division}_{season[i]}.RDS?raw=true")
}
con <- url(url)
on.exit(close(con))
scoreboard <- rbind(scoreboard, try(readRDS(con), silent = TRUE))
}
}
return(scoreboard)
}
team_ids <- read_csv("teams/data/all_teams.csv") %>%
select(team_name, team_id)
rankings <- "https://nfca.org/component/com_nfca/Itemid,230/list,1/pdiv,div1/top25,1/year,2024/" %>%
read_html() %>%
html_table() %>%
extract2(1) %>%
mutate(Team = str_extract(Team, "\\w+(?: \\w+)?"),
Team = str_replace(Team, "State", "St.")) %>%
left_join(team_ids, by = c("Team" = "team_name")) %>%
select(Team, Rank) %>%
`names<-`(c("Team", "Rank"))
d1_id <- 18261
d2_id <- 18264
d3_id <- 18265
seasons <- data.frame(season = 2012:2024,
start_date = c("2012-02-09", "2013-02-07", "2014-02-06", "2015-02-05","2016-02-11","2017-02-09","2018-02-08","2019-02-07","2020-02-06","2021-02-11","2022-02-10","2023-02-09", "2024-02-09"),
end_date = c("2012-06-06", "2013-06-04", "2014-06-03", "2015-06-03","2016-06-08","2017-06-07","2018-06-06","2019-06-04","2020-03-12","2021-06-10","2022-06-09","2023-06-09", "2024-06-09")) #Go back and fix after season
days = c(as.Date(seasons$start_date[5]):as.Date(seasons$end_date[5]),
as.Date(seasons$start_date[6]):as.Date(seasons$end_date[6]),
as.Date(seasons$start_date[7]):as.Date(seasons$end_date[7]),
as.Date(seasons$start_date[8]):as.Date(seasons$end_date[8]),
as.Date(seasons$start_date[9]):as.Date(seasons$end_date[9]),
as.Date(seasons$start_date[10]):as.Date(seasons$end_date[10]),
as.Date(seasons$start_date[11]):as.Date(seasons$end_date[11]),
as.Date(seasons$start_date[12]):as.Date(seasons$end_date[12]))
scoreboard_d1 <- load_ncaa_softball_scoreboard(2016:2024, "D1")
scoreboard_d2 <- load_ncaa_softball_scoreboard(2016:2024, "D2")
scoreboard_d3 <- load_ncaa_softball_scoreboard(2016:2024, "D3")
scoreboard_d1 <- scoreboard_d1 %>%
select(-c(home_team_id, away_team_id)) %>%
mutate(
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&amp;", "&")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&#39;", "'")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_remove_all(col, "Fairleigh ")
)
) %>%
merge(team_ids %>% `names<-`(c("away_team", "away_team_id")), by = "away_team", all = TRUE) %>%
merge(team_ids %>% `names<-`(c("home_team", "home_team_id")), by = "home_team", all = TRUE) %>%
drop_na() %>%
select(away_team, away_team_id, away_team_logo, away_team_runs, home_team, home_team_id, home_team_logo, home_team_runs, game_date, game_id, status)
scoreboard_d2 <- scoreboard_d2 %>%
select(-c(home_team_id, away_team_id)) %>%
mutate(
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&amp;", "&")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&#39;", "'")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_remove_all(col, "Fairleigh ")
)
) %>%
merge(team_ids %>% `names<-`(c("away_team", "away_team_id")), by = "away_team", all = TRUE) %>%
merge(team_ids %>% `names<-`(c("home_team", "home_team_id")), by = "home_team", all = TRUE) %>%
drop_na() %>%
select(away_team, away_team_id, away_team_logo, away_team_runs, home_team, home_team_id, home_team_logo, home_team_runs, game_date, game_id, status)
scoreboard_d3 <- scoreboard_d3 %>%
select(-c(home_team_id, away_team_id)) %>%
mutate(
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&amp;", "&")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_replace(col, "&#39;", "'")
),
across(
.cols = c(home_team, away_team),
.fns = \(col) str_remove_all(col, "Fairleigh ")
)
) %>%
merge(team_ids %>% `names<-`(c("away_team", "away_team_id")), by = "away_team", all = TRUE) %>%
merge(team_ids %>% `names<-`(c("home_team", "home_team_id")), by = "home_team", all = TRUE) %>%
drop_na() %>%
select(away_team, away_team_id, away_team_logo, away_team_runs, home_team, home_team_id, home_team_logo, home_team_runs, game_date, game_id, status)
days
days[1]
days[1] -> i
cur_games <- scoreboard_d1 %>%
filter(game_date == format(as.Date(i, origin = "1970-01-01"), "%m/%d/%Y"))
if(year(as.Date(i, origin = "1970-01-01")) == 2024){
cur_games <- cur_games %>%
left_join(rankings, by = c("home_team" = "Team")) %>%
rename(home_rank = Rank) %>%
left_join(rankings, by = c("away_team" = "Team")) %>%
rename(away_rank = Rank) %>%
mutate(home_rank = ifelse(is.na(home_rank), 26, home_rank),
away_rank = ifelse(is.na(away_rank), 26, away_rank)) %>%
rowwise() %>%
mutate(top_rank = min(c(home_rank, away_rank)),
home_team = ifelse(home_rank <= 25, paste0("#", home_rank, " ", home_team), home_team),
away_team = ifelse(away_rank <= 25, paste0("#", away_rank, " ", away_team), away_team)) %>%
arrange(top_rank) %>%
select(away_team, away_team_id, away_team_logo, away_team_runs, home_team, home_team_id, home_team_logo, home_team_runs, game_date, game_id, status)
}
View(cur_games)
if(!is.null(nrow(cur_games))){
cur_games <- cur_games %>%
mutate(game_date = substr(game_date, 1, 10))
}
library(readr)
d1_hitting_box_2023 <- read_csv("teams/data/box_scores/d1_hitting_box_2023.csv")
View(d1_hitting_box_2023)
library(tidyverse)
load_ncaa_softball_playerbox <- function(season = 2024, category, division = "D1"){
if(!is.numeric(season)) return("Invalid Season")
if(!(category %in% c("Hitting", "Pitching", "Fielding"))) return("Invalid Category")
if(category == "Fielding" & (length(season) > 1 | season[1] != 2023)) return("Only includes 2023 data... for now")
if(min(season < 2015 | max(season > 2024)) & category == "Pitching") return("Invalid Season")
if(min(season < 2015 | max(season > 2024)) & category == "Hitting") return("Invalid Season")
if(!(division %in% c("D1", "D2", "D3"))) stop("Invalid Division")
division <- stringr::str_replace(division, "D", "d")
url <- c()
if(category == "Hitting"){
for(i in season){
if(division == "d3" & category == "Hitting" & i == 2021) {url <- c(url, "https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_hitting_box_scores_2021.RDS?raw=true"); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_hitting_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Pitching"){
for(i in season){
if(division == "d3" & category == "Pitching" & i %in% 2016:2020) {url <- c(url, glue::glue("https://github.com/sportsdataverse/softballR-data/blob/main/data/D3_pitching_box_scores_{i}.RDS?raw=true")); next}
url <- c(url, glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/{division}_pitching_box_scores_{i}.RDS?raw=true"))
}
} else if(category == "Fielding"){
url <- glue::glue("https://github.com/tmking2002/softballR-data/blob/main/data/d1_fielding_box_scores_2023.RDS?raw=true")
}
box <- data.frame()
for(i in url){
con <- url(i)
on.exit(close(con))
box <- bind_rows(box, readRDS(con))
}
return(box)
}
all_players <- read_csv("players/data/all_players.csv") %>%
select(player_id, player)
adjust_hitting_box <- function(raw_box){
final_box <- raw_box %>%
separate(player, c("last", "first"), ", ") %>%
mutate(player = paste(first, last),
bb = bb + hbp) %>%
merge(all_players, by = "player") %>%
arrange(desc(ab + bb)) %>%
select(game_id, team, opponent, player_id, player, pos, ab, r, h, rbi, hr, k, bb)
return(final_box)
}
for(season in 2015:2024){
box <- data.frame()
for(division in c("d1", "d2", "d3")){
box <- rbind(box, load_ncaa_softball_playerbox(season, category = "Hitting", division))
}
write.csv(box %>% adjust_hitting_box, paste0("teams/data/box_scores/hitting_box_", season, ".csv"))
}
for(season in 2015:2024){
box <- data.frame()
for(division in c("D1", "D2", "D3")){
box <- rbind(box, load_ncaa_softball_playerbox(season, category = "Hitting", division))
}
write.csv(box %>% adjust_hitting_box, paste0("teams/data/box_scores/hitting_box_", season, ".csv"))
}
for(season in 2016:2024){
box <- data.frame()
for(division in c("D1", "D2", "D3")){
box <- rbind(box, load_ncaa_softball_playerbox(season, category = "Hitting", division))
}
write.csv(box %>% adjust_hitting_box, paste0("teams/data/box_scores/hitting_box_", season, ".csv"))
}
adjust_pitching_box <- function(raw_box){
final_box <- raw_box %>%
separate(ip, c("innings", "frac"), sep = "\\.") %>%
mutate(ip = as.numeric(ifelse(is.na(frac), innings, as.numeric(innings) + as.numeric(frac) * 1/3))) %>%
select(-c(innings, frac)) %>%
separate(player, c("last", "first"), ", ") %>%
mutate(player = paste(first, last)) %>%
merge(all_players, by = "player") %>%
arrange(desc(ip)) %>%
mutate(ip = case_when((ip * 3) %% 3 == 0 ~ round(ip),
round(ip * 3) %% 3 == 1 ~ round(ip) + .1,
round(ip * 3) %% 3 == 2 ~ round(ip) + .2)) %>%
select(game_id, team, opponent, player_id, player, ip, ha, er, bb, hb, so, bf, hr_a, go, fo)
return(final_box)
}
for(season in 2016:2024){
box <- data.frame()
for(division in c("D1", "D2", "D3")){
box <- rbind(box, load_ncaa_softball_playerbox(season, category = "Pitching", division))
}
write.csv(box %>% adjust_hitting_box, paste0("teams/data/box_scores/pitching_box_", season, ".csv"))
}
load_ncaa_softball_playerbox(2016, "Pitching", "D3") -> test
View(test)
box %>% adjust_pitching_box(.)
for(season in 2016:2024){
box <- data.frame()
for(division in c("D1", "D2", "D3")){
box <- rbind(box, load_ncaa_softball_playerbox(season, category = "Pitching", division))
}
write.csv(box %>% adjust_pitching_box(.), paste0("teams/data/box_scores/pitching_box_", season, ".csv"))
}
